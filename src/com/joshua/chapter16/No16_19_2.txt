// 未完成的16_19
// 思想是双层遍历从matrix中找到每一个值为0的位置，没找到一个这样的位置，利用栈查看其周围的8个位置是否为0，是则入栈，知道最终栈为空， 类似数的遍历
// 但是由于过程太过冗长，故未完成，难度不大，过程比较枯燥，代码比较长

void findPonds(int[][] matrix){
	int rows = matrix.length;
	int columsn = matrix[0].length;
	int [][] flags = new int[rows][columns];

	for(int row = 0; row < rows; i++){
		for(int column = 0; column < columns; j++){
			if(matrix[row][column] ==0 && flags[row][column] == 0){
				computeArea(matrix, flags, row, column);
			}
		}
	}
}

void computeArea(int[][] matrix, int[][] flags, int row, int column){
	Stack<Plot) stack = new Stack<Plot>();
	stack.push(new Plot(row, column));
	int areaCount = 0;
	
	while(stack != null){
		Plot plot = stack.pop();
		flags[row][column] == 1;
		areaCount++;
		int row = plot.getRow();
		int column = plot.getColumn();

		if((row - 1) >= 0 && (column - 1) >= 0 && matrix[row-1][column-1] == 0 && flags[row-1][column-1] == 0){
			stack.push(new Plot(row - 1, column - 1));
		}else if((row - 1) >= 0 && matrix[row-1][column] == 0 && flags[row-1][column] == 0){
			stack.push(new Plot(row - 1, column);
		}else if((row - 1) >= 0 && (column + 1) >= 0 && matrix[row-1][column-1] == 0 && flags[row-1][column-1] == 0)
	}
}

boolean withinMatrix(int maxRow, int maxColumn

class Plot{
	private int row;
	private int column;
	
	public Plost(int row, int column){
		this.row = row;
		this.column = column;
	}
	
	public int getRow(){
		return row;
	}
	
	public int getColumn(){
		return column;
	}
}